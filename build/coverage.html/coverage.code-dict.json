{"/home/travis/build/npmtest/node-npmtest-rx-angular/test.js":"/* istanbul instrument in package npmtest_rx_angular */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rx-angular/lib.npmtest_rx_angular.js":"/* istanbul instrument in package npmtest_rx_angular */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_rx_angular = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_rx_angular = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-rx-angular/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-rx-angular && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_rx_angular */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_rx_angular\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_rx_angular.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_rx_angular.rollup.js'] =\n            local.assetsDict['/assets.npmtest_rx_angular.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_rx_angular.__dirname + '/lib.npmtest_rx_angular.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rx-angular/node_modules/rx-angular/index.js":"module.exports = require('./dist/rx.angular');\n","/home/travis/build/npmtest/node-npmtest-rx-angular/node_modules/rx-angular/dist/rx.angular.js":"// Copyright (c) Microsoft. All rights reserved. See License.txt in the project root for license information.\n\n;(function (root, factory) {\n  var objectTypes = {\n    'boolean': false,\n    'function': true,\n    'object': true,\n    'number': false,\n    'string': false,\n    'undefined': false\n  };\n\n  var root = (objectTypes[typeof window] && window) || this,\n    freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,\n    freeModule = objectTypes[typeof module] && module && !module.nodeType && module,\n    moduleExports = freeModule && freeModule.exports === freeExports && freeExports,\n    freeGlobal = objectTypes[typeof global] && global;\n  \n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  // Because of build optimizers\n  if (typeof define === 'function' && define.amd) {\n    define(['rx', 'angular', 'exports'], function (Rx, angular, exports) {\n      root.Rx = factory(root, exports, Rx, angular);\n      return root.Rx;\n    });\n  } else if (typeof module == 'object' && module && module.exports == freeExports) {\n    module.exports = factory(root, module.exports, require('rx'), require('angular'));\n  } else {\n    root.Rx = factory(root, {}, root.Rx, root.angular);\n  }\n}(this, function (global, exp, Rx, angular, undefined) {\n\nvar errorObj = {e: {}};\n\nfunction tryCatcherGen(tryCatchTarget) {\n  return function tryCatcher() {\n    try {\n      return tryCatchTarget.apply(this, arguments);\n    } catch (e) {\n      errorObj.e = e;\n      return errorObj;\n    }\n  };\n}\n\nfunction tryCatch(fn) {\n  if (!angular.isFunction(fn)) { throw new TypeError('fn must be a function'); }\n  return tryCatcherGen(fn);\n}\n\nfunction thrower(e) {\n  throw e;\n}\n\n  /**\n   * @ngdoc overview\n   * @name rx\n   *\n   * @description\n   * The `rx` module contains essential components for reactive extension bindings\n   * for Angular apps.\n   *\n   * Installation of this module is just a cli command away:\n   *\n   * <pre>\n   * bower install rx-angular\n   * <pre>\n   *\n   * Simply declare it as dependency of your app like this:\n   *\n   * <pre>\n   * var app = angular.module('myApp', ['rx']);\n   * </pre>\n   */\n  var rxModule = angular.module('rx', []);\n\n  /**\n   * @ngdoc service\n   * @name rx.rx\n   *\n   * @requires $window\n   *\n   * @description\n   * Factory service that exposes the global `Rx` object to the Angular world.\n   */\n  rxModule.factory('rx', ['$window', function($window) {\n    $window.Rx || ($window.Rx = Rx);\n\n    var CreateObservableFunction = (function(__super__) {\n      Rx.internals.inherits(CreateObservableFunction, __super__);\n      function CreateObservableFunction(self, name, fn) {\n        this._self = self;\n        this._name = name;\n        this._fn = fn;\n        __super__.call(this);\n      }\n\n      CreateObservableFunction.prototype.subscribeCore = function (o) {\n        var fn = this._fn;\n        this._self[this._name] = function () {\n          var len = arguments.length, args = new Array(len);\n          for (var i = 0; i < len; i++) { args[i] = arguments[i]; }\n\n          if (angular.isFunction(fn)) {\n            var result = tryCatch(fn).apply(this, args);\n            if (result === errorObj) { return o.onError(result.e); }\n            o.onNext(result);\n          } else if (args.length === 1) {\n            o.onNext(args[0]);\n          } else {\n            o.onNext(args);\n          }\n        };\n\n        return new InnerDisposable(this._self, this._name);\n      };\n\n      function InnerDisposable(self, name) {\n        this._self = self;\n        this._name = name;\n        this.isDisposed = false;\n      }\n\n      InnerDisposable.prototype.dispose = function () {\n        if (!this.isDisposed) {\n          this.isDisposed = true;\n          delete this._self[this._name];\n        }\n      };\n\n      return CreateObservableFunction;\n    }(Rx.ObservableBase));\n\n    Rx.createObservableFunction = function (self, functionName, listener) {\n      return new CreateObservableFunction(self, functionName, listener).publish().refCount();\n    };\n\n    return $window.Rx;\n  }]);\n\n  /**\n  * @ngdoc service\n  * @name rx.observeOnSope\n  *\n  * @requires rx.rx\n  *\n  * @description\n  * An observer function that returns a function for a given `scope`,\n  * `watchExpression` and `objectEquality` object. The returned function\n  * delegates to an Angular watcher.\n  *\n  * @param {object} scope Scope object.\n  * @param {(string|object)} watchExpression Watch expression.\n  * @param {boolean} objectEquality Object to compare for object equality.\n  *\n  * @return {function} Factory function that creates obersables.\n  */\n  rxModule.factory('observeOnScope', ['rx', function(rx) {\n    var ObserveOnScope = (function(__super__) {\n      rx.internals.inherits(ObserveOnScope, __super__);\n      function ObserveOnScope(scope, expr, eq) {\n        this._scope = scope;\n        this._expr = expr;\n        this._eq = eq;\n        __super__.call(this);\n      }\n\n      function createListener(o) {\n        return function listener(newValue, oldValue) {\n          o.onNext({ oldValue: oldValue, newValue: newValue });\n        };\n      }\n\n      ObserveOnScope.prototype.subscribeCore = function (o) {\n        return new InnerDisposable(this._scope.$watch(this._expr, createListener(o), this._eq));\n      };\n\n      function InnerDisposable(fn) {\n        this._fn = fn;\n        this.isDisposed = false;\n      }\n\n      InnerDisposable.prototype.dispose = function () {\n        if (!this.isDisposed) {\n          this._fn();\n          this.isDisposed = true;\n        }\n      };\n\n      return ObserveOnScope;\n    }(rx.ObservableBase));\n\n    return function(scope, watchExpression, objectEquality) {\n      return new ObserveOnScope(scope, watchExpression, objectEquality);\n    };\n  }]);\n\n  function noop () { }\n\n  Rx.Observable.prototype.safeApply = function($scope, onNext, onError, onComplete){\n    onNext = angular.isFunction(onNext) ? onNext : noop;\n    onError = angular.isFunction(onError) ? onError : noop;\n    onComplete = angular.isFunction(onComplete) ? onComplete : noop;\n\n    return this\n      .takeWhile(function () {\n        return !$scope.$$destroyed;\n      })\n      .tap(\n        function (data){\n          ($scope.$$phase || $scope.$root.$$phase) ?\n            onNext(data) :\n            $scope.$apply(function () { onNext(data); });\n        },\n        function (error){\n          ($scope.$$phase || $scope.$root.$$phase) ?\n            onError(error) :\n            $scope.$apply(function () { onError(error); });\n        },\n        function (){\n          ($scope.$$phase || $scope.$root.$$phase) ?\n            onComplete() :\n            $scope.$apply(function () { onComplete(); });\n        });\n  };\n\n  rxModule.config(['$provide', function($provide) {\n    /**\n     * @ngdoc service\n     * @name rx.$rootScope\n     *\n     * @requires $delegate\n     *\n     * @description\n     * `$rootScope` decorator that extends the existing `$rootScope` service\n     * with additional methods. These methods are Rx related methods, such as\n     * methods to create observables or observable functions.\n     */\n    $provide.decorator('$rootScope', ['$delegate', 'rx', function($delegate, rx) {\n\n      Object.defineProperties($delegate.constructor.prototype, {\n        /**\n           * @ngdoc property\n           * @name rx.$rootScope.$toObservable\n           *\n           * @description\n           * Provides a method to create observable methods.\n           */\n          '$toObservable': {\n              /**\n               * @ngdoc function\n               * @name rx.$rootScope.$toObservable#value\n               *\n               * @description\n               * Creates an observable from a watchExpression.\n               *\n               * @param {(function|string)} watchExpression A watch expression.\n               * @param {boolean} objectEquality Compare object for equality.\n               *\n               * @return {object} Observable.\n               */\n              value: function(watchExpression, objectEquality) {\n                var scope = this;\n                return rx.Observable.create(function (observer) {\n                  // Create function to handle old and new Value\n                  function listener (newValue, oldValue) {\n                    observer.onNext({ oldValue: oldValue, newValue: newValue });\n                  }\n\n                  // Returns function which disconnects the $watch expression\n                  var disposable = rx.Disposable.create(scope.$watch(watchExpression, listener, objectEquality));\n\n                  scope.$on('$destroy', function(){\n                      disposable.dispose();\n                  });\n\n                  return disposable;\n                }).publish().refCount();\n              },\n              /**\n               * @ngdoc property\n               * @name rx.$rootScope.$toObservable#enumerable\n               *\n               * @description\n               * Enumerable flag.\n               */\n              enumerable: false,\n              configurable: true,\n              writable: true\n          },\n          /**\n           * @ngdoc property\n           * @name rx.$rootScope.$toObservableCollection\n           *\n           * @description\n           * Provides a method to create observable methods.\n           */\n          '$toObservableCollection': {\n              /**\n               * @ngdoc function\n               * @name rx.$rootScope.$toObservableCollection#value\n               *\n               * @description\n               * Creates an observable from a watchExpression.\n               *\n               * @param {(function|string)} watchExpression A watch expression.\n               *\n               * @return {object} Observable.\n               */\n              value: function(watchExpression) {\n                var scope = this;\n                return rx.Observable.create(function (observer) {\n                  // Create function to handle old and new Value\n                  function listener (newValue, oldValue) {\n                    observer.onNext({ oldValue: oldValue, newValue: newValue });\n                  }\n\n                  // Returns function which disconnects the $watch expression\n                  var disposable = rx.Disposable.create(scope.$watchCollection(watchExpression, listener));\n\n                  scope.$on('$destroy', function(){\n                    disposable.dispose();\n                  });\n\n                  return disposable;\n                }).publish().refCount();\n              },\n              /**\n               * @ngdoc property\n               * @name rx.$rootScope.$toObservableCollection#enumerable\n               *\n               * @description\n               * Enumerable flag.\n               */\n              enumerable: false,\n              configurable: true,\n              writable: true\n          },\n          /**\n           * @ngdoc property\n           * @name rx.$rootScope.$toObservableGroup\n           *\n           * @description\n           * Provides a method to create observable methods.\n           */\n          '$toObservableGroup': {\n              /**\n               * @ngdoc function\n               * @name rx.$rootScope.$toObservableGroup#value\n               *\n               * @description\n               * Creates an observable from a watchExpressions.\n               *\n               * @param {(function|string)} watchExpressions A watch expression.\n               *\n               * @return {object} Observable.\n               */\n              value: function(watchExpressions) {\n                var scope = this;\n                return rx.Observable.create(function (observer) {\n                  // Create function to handle old and new Value\n                  function listener (newValue, oldValue) {\n                    observer.onNext({ oldValue: oldValue, newValue: newValue });\n                  }\n\n                  // Returns function which disconnects the $watch expression\n                  var disposable = rx.Disposable.create(scope.$watchGroup(watchExpressions, listener));\n\n                  scope.$on('$destroy', function(){\n                    disposable.dispose();\n                  });\n\n                  return disposable;\n                }).publish().refCount();\n              },\n              /**\n               * @ngdoc property\n               * @name rx.$rootScope.$toObservableGroup#enumerable\n               *\n               * @description\n               * Enumerable flag.\n               */\n              enumerable: false,\n              configurable: true,\n              writable: true\n          },\n        /**\n         * @ngdoc property\n         * @name rx.$rootScope.$eventToObservable\n         *\n         * @description\n         * Provides a method to create observable methods.\n         */\n        '$eventToObservable': {\n          /**\n           * @ngdoc function\n           * @name rx.$rootScope.$eventToObservable#value\n           *\n           * @description\n           * Creates an Observable from an event which is fired on the local $scope.\n           * Expects an event name as the only input parameter.\n           *\n           * @param {string} event name\n           *\n           * @return {object} Observable object.\n           */\n          value: function(eventName, selector) {\n            var scope = this;\n            return rx.Observable.create(function (observer) {\n              function listener () {\n                var len = arguments.length, args = new Array(len);\n                for (var i = 0; i < len; i++) { args[i] = arguments[i]; }\n                if (angular.isFunction(selector)) {\n                  var result = tryCatch(selector).apply(null, args);\n                  if (result === errorObj) { return observer.onError(result.e); }\n                  observer.onNext(result);\n                } else if (args.length === 1) {\n                  observer.onNext(args[0]);\n                } else {\n                  observer.onNext(args);\n                }\n              }\n\n              // Returns function which disconnects from the event binding\n              var disposable = rx.Disposable.create(scope.$on(eventName, listener));\n\n              scope.$on('$destroy', function(){ disposable.dispose(); });\n\n              return disposable;\n            }).publish().refCount();\n          },\n          /**\n           * @ngdoc property\n           * @name rx.$rootScope.$eventToObservable#enumerable\n           *\n           * @description\n           * Enumerable flag.\n           */\n          enumerable: false,\n          configurable: true,\n          writable: true\n        },\n        /**\n         * @ngdoc property\n         * @name rx.$rootScope.$createObservableFunction\n         *\n         * @description\n         * Provides a method to create obsersables from functions.\n         */\n        '$createObservableFunction': {\n          /**\n           * @ngdoc function\n           * @name rx.$rootScope.$createObservableFunction#value\n           *\n           * @description\n           * Creates an observable from a given function.\n           *\n           * @param {string} functionName A function name to observe.\n           * @param {function} listener A listener function that gets executed.\n           *\n           * @return {function} Remove listener function.\n           */\n          value: function(functionName, listener) {\n            return rx.createObservableFunction(this, functionName, listener);\n          },\n          /**\n           * @ngdoc property\n           * @name rx.$rootScope.$createObservableFunction#enumerable\n           *\n           * @description\n           * Enumerable flag.\n           */\n          enumerable: false,\n          configurable: true,\n          writable: true\n        },\n        /**\n         * @ngdoc function\n         * @name rx.$rootScope.$digestObservables#value\n         *\n         * @description\n         * Digests the specified observables when they produce new values.\n         * The scope variable / assignable expression specified by the observable's key\n         *   is set to the new value.\n         *\n         * @param {object.<string, Rx.Observable>} obj A map where keys are scope properties\n         *   (assignable expressions) and values are observables.\n         *\n         * @return {Rx.Observable.<{observable: Rx.Observable, expression: string, value: object}>}\n         *   Observable of change objects.\n         */\n        '$digestObservables': {\n          value: function(observables) {\n            var scope = this;\n            return rx.Observable.pairs(observables)\n              .flatMap(function(pair) {\n                return pair[1].digest(scope, pair[0])\n                  .map(function(val) {\n                    return {\n                      observable: pair[1],\n                      expression: pair[0],\n                      value: val\n                    };\n                  });\n              }).publish().refCount();\n          },\n          /**\n           * @ngdoc property\n           * @name rx.$rootScope.digestObservables#enumerable\n           *\n           * @description\n           * Enumerable flag.\n           */\n          enumerable: false,\n          configurable: true,\n          writable: true\n        }\n      });\n\n      return $delegate;\n    }]);\n  }]);\n\n  rxModule.run(['$parse', function($parse) {\n\n    var DigestObservable = (function(__super__) {\n      Rx.internals.inherits(DigestObservable, __super__);\n      function DigestObservable(source, $scope, prop) {\n        this.source = source;\n        this.$scope = $scope;\n        this.prop = prop;\n        __super__.call(this);\n      }\n\n      DigestObservable.prototype.subscribeCore = function (o) {\n        var propSetter = $parse(this.prop).assign;\n        if (!propSetter) {\n          return o.onError(new Error('Property or expression is not assignable.'));\n        }\n\n        var m = new Rx.SingleAssignmentDisposable();\n        m.setDisposable(this.source.subscribe(new DigestObserver(o, this.$scope, propSetter)));\n        this.$scope.$on('$destroy', function () { m.dispose(); });\n\n        return m;\n      };\n\n      return DigestObservable;\n    }(Rx.ObservableBase));\n\n    var DigestObserver = (function(__super__) {\n      Rx.internals.inherits(DigestObserver, __super__);\n      function DigestObserver(o, $scope, propSetter) {\n        this.o = o;\n        this.$scope = $scope;\n        this.propSetter = propSetter;\n        __super__.call(this);\n      }\n\n      DigestObserver.prototype.next = function (x) {\n        if (!this.$scope.$$phase) {\n          var _this = this;\n          this.$scope.$apply(function() {\n            _this.propSetter(_this.$scope, x);\n          });\n        } else {\n          this.propSetter(this.$scope, x);\n        }\n        this.o.onNext(x);\n      };\n      DigestObserver.prototype.error = function (e) { this.o.onError(e); };\n      DigestObserver.prototype.completed = function () { this.o.onCompleted(); };\n\n      return DigestObserver;\n    }(Rx.internals.AbstractObserver));\n\n    Rx.Observable.prototype.digest = function($scope, prop) {\n      return new DigestObservable(this, $scope, prop);\n    };\n  }]);\n\n  var ScopeScheduler = Rx.ScopeScheduler = (function (__super__) {\n    function ScopeScheduler($scope) {\n      this.$scope = $scope;\n      __super__.call(this);\n    }\n\n    Rx.internals.inherits(ScopeScheduler, __super__);\n\n    ScopeScheduler.prototype.schedule = function (state, action) {\n      if (this.$scope.$$destroyed) { return Rx.Disposable.empty; }\n\n      var sad = new Rx.SingleAssignmentDisposable();\n      var $scope = this.$scope;\n\n      if ($scope.$$phase || $scope.$root.$$phase) {\n        sad.setDisposable(Rx.Disposable._fixup(state(action)));\n      } else {\n        $scope.$apply.call(\n          $scope,\n          function () { sad.setDisposable(Rx.Disposable._fixup(state(action))); }\n        );\n      }\n    };\n\n    ScopeScheduler.prototype._scheduleFuture = function (state, dueTime, action) {\n      if (this.$scope.$$destroyed) { return Rx.Disposable.empty; }\n\n      var sad = new Rx.SingleAssignmentDisposable();\n      var $scope = this.$scope;\n\n      var id = setTimeout(function () {\n        if ($scope.$$destroyed || sad.isDisposed) { return clearTimeout(id); }\n\n        if ($scope.$$phase || $scope.$root.$$phase) {\n          sad.setDisposable(Rx.Disposable._fixup(state(action)));\n        } else {\n          $scope.$apply.call(\n            $scope,\n            function () { sad.setDisposable(Rx.Disposable._fixup(state(action))); }\n          );\n        }\n      }, dueTime);\n\n      return new Rx.BinaryDisposable(\n        sad,\n        Rx.Disposable.create(function () { clearTimeout(id); })\n      );\n    };\n\n    ScopeScheduler.prototype.schedulePeriodic = function (state, period, action) {\n      if (this.$scope.$$destroyed) { return Rx.Disposable.empty; }\n\n      period = Rx.Scheduler.normalize(period);\n\n      var $scope = this.$scope;\n      var s = state;\n\n      var id = setInterval(function () {\n        if ($scope.$$destroyed) { return clearInterval(id); }\n\n        if ($scope.$$phase || $scope.$root.$$phase) {\n          s = action(s);\n        } else {\n          $scope.$apply.call($scope, function () { s = action(s); });\n        }\n      }, period);\n\n      return Rx.Disposable.create(function () { clearInterval(id); });\n    };\n\n    return ScopeScheduler;\n  }(Rx.Scheduler));\n\n  return Rx;\n}));"}